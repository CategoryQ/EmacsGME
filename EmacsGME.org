#+TITLE: EmacsGME
#+DESCRIPTION: A variety of elisp functions for implementing a solo roleplaying gamesmaster emulator, for playing a full game within an org-file
#+PROPERTY: header-args :tangle egme.el

* Introduction

The basic idea is to define some functions within emacs lisp, to facilitate solo roleplaying. Then you'll be able to M-x or
assign keybinds to quickly roll dice, or get Yes/No oracle results from the GM emulator, fed straight into the document
where you are logging your game play. A generic dice roller will be needed (to facilitate any RPG system). As for the GM
emulator, I'll need to desgn a basic system (where outcome likelihood cna change), along with a subject/meaning look up
table, a way of managing lists of threads/NPCs, and random events poppng up.

Initially just some useful functions, possibly to become a minor-mode all of it's own?

* Planned Functions

Below are the planned functions, along with some scratch code testing ideas.

** TODO Dice Roller

The core of this is obviously the ~random~ function.  The below example shows a single D6 roll - randomly generating a number
up to the limit of 6 (integers, 0 1 2 3 4 5), then adding 1 to the result for a normal dice outcome.

#+BEGIN_SRC emacs-lisp :tangle no
(+ (random 6) 1)
#+END_SRC

#+RESULTS:
: 4

~random~ will produce a result up to the given limit, using addition here to add to it (as D6 doesn't have a ~0~ side, D10 would
not need that addition for example). Passing the value ~t~ or a string will reseed the psuedo random number generator. Setting
a textual seed at the start of each gameplay file is a good idea, so if it ever get's recalculated the results will be
consistent (in the same version of emacs, at least).

#+BEGIN_SRC emacs-lisp :tangle no
(random "This is the RNG seed for this Adventure")
#+END_SRC

#+RESULTS:
: 1835456236453760268

The results output is the seed number generated by the given input string.


Firstly, I need to find a way to take input... Below will ask for a dice roll and set it to the variable
~egme-current-dice~. Having ~(interactive)~ in the function dictates whether or not the function can be called via calling
M-x. This will be helpful to separate internal reused functions from user-facing input.

#+BEGIN_SRC emacs-lisp :tangle no
(defun egme-get-dice ()
  "Get the required dice-roll from user input on the minibuffer."
  ;(interactive)
  (setq egme-current-dice (read-string "Enter dice roll:")))
#+END_SRC

#+RESULTS:
: egme-get-dice


The selected dice can later be returned by evaluating it's name.

#+BEGIN_SRC emacs-lisp :tangle no
(egme-get-dice)
egme-current-dice
#+END_SRC

#+RESULTS:
: 3d10



** TODO Yes/No Oracle

** TODO Random Events

* Function Definitions

This seciton contains fully defined functions, ready to be added to a running instance of emacs.
